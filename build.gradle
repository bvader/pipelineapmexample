import java.util.concurrent.Executors

import static java.util.concurrent.TimeUnit.NANOSECONDS

buildscript {
    ext {
        apmVersion = '1.6.1'
    }
}

plugins {
    id 'java'
}

group 'org.pipelineexample'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {    
    compile "co.elastic.apm:apm-agent-api:${apmVersion}"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def mainClassName = "org.pipelineexample.apm.ProcessorApplication"

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task gitAddApmJar {
    doLast {
        def elasticApm = new File("./elastic-apm-agent-${apmVersion}.jar");

        if (!elasticApm.exists()) {
            throw new GradleException("File not found /elastic-apm-agent${apmVersion}.jar")
        }
        exec {
            commandLine 'jar', '-uf', jar.archivePath, "./elastic-apm-agent-${apmVersion}.jar"
        }
    }
}


task runPipeline {
    doLast {
        def apmPropertiesFile = new File("apm.properties")
        if (!apmPropertiesFile.exists()) {
            throw new GradleException("apm.properties not found. Create it from `apm.example.propeties`")
        }
        
        def apmProps = new Properties()
        file("apm.properties").withInputStream { apmProps.load(it) }
        apmProps.put("elastic.apm.application_packages", "org.pipelineexample.apm")
        
             
        def props = new Properties()
        file("pipeline.properties").withInputStream { props.load(it) }

        def burnCpus = props.getProperty("burnCpus");

        def ports = props.getProperty("ports").split(",")
        def total = ports.length + 1

        def taskExecutor = Executors.newFixedThreadPool(total)
        1.upto(total, {
            def processorName
            def inPort
            def outPort

            if (it == 1) {
                processorName = "Source"
                inPort = -1
                outPort = ports[0]
            } else if (it == total) {
                processorName = "Sink"
                inPort = ports[total - 2]
                outPort = -1
            } else {
                inPort = ports[it - 2]                
                outPort = ports[it - 1]
                processorName = "Processor-" + (it - 1)
            }
            taskExecutor.execute({javaexec {
                main="-javaagent:./elastic-apm-agent-${apmVersion}.jar"
                args = ["-Delastic.apm.service_name=${apmProps.getProperty("elastic.apm.service_name")}",
                        "-Delastic.apm.server_urls=${apmProps.getProperty("elastic.apm.server_urls")}",
                        "-Delastic.apm.secret_token=${apmProps.getProperty("elastic.apm.secret_token")}",
                        "-Delastic.apm.application_packages=${apmProps.getProperty("elastic.apm.application_packages")}",
                        "-jar",
                        jar.archivePath, processorName, inPort, outPort, burnCpus]
                }
            })
        })
        taskExecutor.shutdown()
        try {
            taskExecutor.awaitTermination(Long.MAX_VALUE, NANOSECONDS)
        } catch (InterruptedException e) {
            throw new GradleException("task interupted", e)
        }

    }
}

runPipeline.dependsOn.add("jar")
build.finalizedBy gitAddApmJar